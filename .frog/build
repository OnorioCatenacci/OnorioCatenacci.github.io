((3) 0 () 13 ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-30-more-scripting-with-racket.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-20-exercise-58-htdp.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-28-exercises-80-and-81-from-how-to-design-programs.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-10-another-exercise-from-htdp.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-13-exercises-for-chapter-2-1-htdp.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-07-some-exercises-from-htdp.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-24-speaking.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-23-exercise-72-from-how-to-design-programs.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-05-where-i-m-going.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-02-helloagainworld.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-19-detroit-tech-watch-book-club.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-06-three-ways-to-share-values-between-elixir-modules.md" . windows) (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-11-scripting-with-racket.md" . windows)) () (h ! (equal) ((? . 0) f post (u . "More Scripting With Racket") (? . 0) 1738333625 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2025/01/more-scripting-with-racket.html" . windows) (u . "/2025\\01\\more-scripting-with-racket.html") (u . "2025-01-30T15:01:08") (? . 2) #f (c (u . "Racket") c (u . "Scripting") c (u . "CrossPlatform") c (u . "CodingRecipes")) (u . "\n<p>Using <a href=\"https://racket-lang.org\">racket</a> in a shell script to automate some repetitive commands.</p>") #t (u . "\n<p>Using <a href=\"https://racket-lang.org\">racket</a> in a shell script to automate some repetitive commands.</p>\n<!-- more-->\n\n<p>Lately I&rsquo;ve been looking at the <a href=\"https://zed.dev\">Zed editor</a> and being the sort of developer I am I wanted to see if I could get it just as nice in Windows as it is in Linux.</p>\n\n<p>On Linux and Mac there&rsquo;s a nice prebuilt binary available. They (the Zed folks) are working on a Windows port but for now a developer needs to built it his/herself from code. By the way I&rsquo;ve got to hand it to the Zed folks&mdash;once it&rsquo;s built it works very well on Windows. So to run it on Windows, I need to change to the root of the Zed source tree and then use Rust&rsquo;s cargo tool to fire up the binary. Being the lazy human being that I am I wanted to automate that so that I could easily fire off Zed from anywhere. And being that I also love Racket I wanted to use my Powershell/Racket combo to automate things. Well here&rsquo;s the result of that!</p>\n\n<div class=\"brush: powershell\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">;</span> <span class=\"n\">Racket</span><span class=\"p\">.</span><span class=\"n\">exe</span> <span class=\"p\">(</span><span class=\"nb\">Resolve-Path</span> <span class=\"nv\">$PSCommandPath</span><span class=\"p\">)</span> <span class=\"nv\">$args</span>\n<span class=\"p\">;</span> <span class=\"n\">Exit</span>\n<span class=\"c\">#lang typed/racket/base</span>\n\n<span class=\"p\">(</span><span class=\"n\">require</span> <span class=\"n\">typed</span><span class=\"p\">/</span><span class=\"n\">racket</span><span class=\"p\">/</span><span class=\"n\">system</span><span class=\"p\">)</span>\n\n<span class=\"p\">(:</span> <span class=\"n\">ZED-PATH</span> <span class=\"n\">Path</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">ZED-PATH</span> <span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">-&gt;</span><span class=\"n\">path</span> <span class=\"s2\">\"C:\\\\Users\\\\Public\\\\zed\\\\\"</span><span class=\"p\">))</span>\n<span class=\"p\">(:</span> <span class=\"n\">CARGO-COMMAND-LINE</span> <span class=\"n\">String</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">CARGO-COMMAND-LINE</span> <span class=\"s2\">\"cargo run --release\"</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">parameterize</span> <span class=\"p\">((</span><span class=\"n\">current-directory</span> <span class=\"n\">ZED-PATH</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">system</span> <span class=\"n\">CARGO-COMMAND-LINE</span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>A few comments about the script are in order I think:</p>\n\n<ol>\n <li>\n  <p>As you may guess I&rsquo;m a big fan of Typed Racket. The two lines in front of the definitions of <code>ZED-PATH</code> and <code>CARGO-COMMAND-LINE</code> aren&rsquo;t strictly needed; they&rsquo;re just a way of expressing my intent.</p></li>\n <li>\n  <p>The <code>parameterize</code> construct (which was pointed out to me by a few of the friendly folks of the Racket community) allows me to temporarily change to another directory, run what I want there and then the directory is changed back to the original directory when the scope of the parameterize ends.</p></li>\n <li>\n  <p>In that <code>parameterize</code> function the function to be parameterized would normally be specified in this fashion <code>([current-directory ZED-PATH])</code>. However the square brackets are special characters to Powershell and Racket allows me to use parentheses there so rather than trying to figure out how to escape the square brackets I simply using parens instead.</p></li>\n <li>\n  <p>The <code>system</code> function starts the command <em>synchronously</em>. That is, it blocks until the command exits. I wouldn&rsquo;t normally want it to be synchronous but the regular async option (at least as far as I know) in Racket is <code>process</code>. While that seemed to work just fine as far as I could tell (I mean it looked as if everything were working as expected) it failed to actually start the binary for me.</p></li>\n <li>\n  <p>There is a command parameter to <code>cargo</code> that should allow me to run the binary from any directory. Again, though, for reasons I was unable to isolate I couldn&rsquo;t make it work correctly with this configuration. So I simply live with having to change to the Zed source root directory while I run the command.</p></li></ol>\n\n<p>I just wanted to document this in case anyone else were interested!</p>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-13-exercises-for-chapter-2-1-htdp.md" . windows) f post (u . "Exercises for Chapter 2.1 HTDP") (? . 4) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2025/01/exercises-for-chapter-2-1-htdp.html" . windows) (u . "/2025\\01\\exercises-for-chapter-2-1-htdp.html") (u . "2025-01-13T12:31:36") (? . 3) (? . 1) (c (u . "Learning") c (u . "SoftwareEngineering") c (u . "HtDP")) (u . "\n<p>My answers for the exercises in Chapter 2 Section 1 of <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a>.</p>") #t (u . "\n<p>My answers for the exercises in Chapter 2 Section 1 of <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a>.</p>\n<!-- more-->\n\n<div class=\"brush: racket\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">htdp/bsl</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span><span class=\"w\"> </span><span class=\"n\">2htdp/image</span><span class=\"p\">)</span>\n\n<span class=\"c1\">; Exercise 11 pg 53</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cartesian-distance</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sqrt))\" style=\"color: inherit\">sqrt</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n\n<span class=\"c1\">; Exercise 12 pg 53</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cvolume</span><span class=\"w\"> </span><span class=\"n\">side-length</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">side-length</span><span class=\"w\"> </span><span class=\"n\">side-length</span><span class=\"w\"> </span><span class=\"n\">side-length</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">csurface</span><span class=\"w\"> </span><span class=\"n\">side-length</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">side-length</span><span class=\"w\"> </span><span class=\"n\">side-length</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">; Exercise 13 pg 53</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">string-empty?</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">string-first</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">string-empty?</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">string-ith</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\">; Exercise 14 pg 53</span>\n<span class=\"c1\">; last-position-of-string assumes that the calling code will check the string to ensure it&#39;s not empty!</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">last-position-of-string</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">string-last</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">string-empty?</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">string-ith</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">last-position-of-string</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\">; Exercise 15 pg 53</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">sunny</span><span class=\"w\"> </span><span class=\"n\">friday</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a></span><span class=\"w\"> </span><span class=\"n\">sunny</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">friday</span><span class=\"p\">))</span>\n\n<span class=\"c1\">; Exercise 16 pg 53</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-area</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-height</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-width</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">; Exercise 17 pg 53</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-classify</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-height</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-width</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"s2\">\"tall\"</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-height</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-width</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"s2\">\"wide\"</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-height</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-width</span><span class=\"w\"> </span><span class=\"n\">image</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"s2\">\"square\"</span><span class=\"p\">]))</span>\n\n<span class=\"c1\">; Exercise 18 pg 53</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-join))\" style=\"color: inherit\">string-join</a></span><span class=\"w\"> </span><span class=\"n\">left-string</span><span class=\"w\"> </span><span class=\"n\">right-string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span><span class=\"w\"> </span><span class=\"n\">left-string</span><span class=\"w\"> </span><span class=\"s2\">\"_\"</span><span class=\"w\"> </span><span class=\"n\">right-string</span><span class=\"p\">))</span>\n\n<span class=\"c1\">; Exercise 19 pg 53</span>\n<span class=\"c1\">; Note, per the text we do not confirm that position is actually contained in the string! </span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">string-insert</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._substring))\" style=\"color: inherit\">substring</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s2\">\"_\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._substring))\" style=\"color: inherit\">substring</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">))))</span>\n\n<span class=\"c1\">; Exercise 20 pg 54</span>\n<span class=\"c1\">; Note, again, per the text we do not confirm that the position is actually contained in the string!  Also note that we don&#39;t bother to check for an empty string being passed!</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">string-delete</span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._substring))\" style=\"color: inherit\">substring</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">))]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._substring))\" style=\"color: inherit\">substring</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._substring))\" style=\"color: inherit\">substring</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._substring))\" style=\"color: inherit\">substring</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span><span class=\"w\"> </span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span><span class=\"p\">)))]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I&rsquo;m not happy with my answer for Exercise 20; it feels like there should be a simpler solution and it&rsquo;s just eluding me. But, for whatever it&rsquo;s worth, here&rsquo;s my answers.</p>\n\n<p><strong>Edit:</strong> Yep, just looking at my answers it occurs to me that I defined a <code>last-position-of-string</code> function which I could have used in exercise 20 but didn&rsquo;t. Mea culpa. I&rsquo;ll leave this as is so that others might benefit from my oversight.</p>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-23-exercise-72-from-how-to-design-programs.md" . windows) f post (u . "Exercise 72 From How To Design Programs") (? . 7) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2025/01/exercise-72-from-how-to-design-programs.html" . windows) (u . "/2025\\01\\exercise-72-from-how-to-design-programs.html") (u . "2025-01-23T14:09:01") (? . 1) (? . 2) (c (u . "Learning") c (u . "SoftwareEngineering") c (u . "HtDP")) (u . "\n<p>My response for Exercises 72 and 73 (Chapter 5.6) of <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a></p>") #t (u . "\n<p>My response for Exercises 72 and 73 (Chapter 5.6) of <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a></p>\n<!-- more-->\n\n<div class=\"brush: racket\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">typed/racket</span>\n\n<span class=\"c1\">; Exercise 72</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define-struct.html#(form._((lib._racket/private/base..rkt)._struct))\" style=\"color: inherit\">struct</a></span><span class=\"w\"> </span><span class=\"n\">phone-number</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">area</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define-struct.html#(form._((lib._racket/private/base..rkt)._struct))\" style=\"color: inherit\">struct</a></span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">phone</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\">phone-number</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">email</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]))</span>\n\n<span class=\"c1\">; Exercise 73</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define-struct.html#(form._((lib._racket/private/base..rkt)._struct))\" style=\"color: inherit\">struct</a></span><span class=\"w\"> </span><span class=\"n\">posn</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\">posn-up-x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/function-contracts.html#(form._((lib._racket/contract/base..rkt)._-~3e))\" style=\"color: inherit\">-&gt;</a></span><span class=\"w\"> </span><span class=\"n\">posn</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"w\"> </span><span class=\"n\">posn</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">posn-up-x</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">posn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">posn-x</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">posn-y</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>I&rsquo;m using Typed Racket here rather than BSL because unless I need to do some graphic work I don&rsquo;t see any reason to solve the problems in BSL since that&rsquo;s ultimately a dead end.</p>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-10-another-exercise-from-htdp.md" . windows) f post (u . "Another Exercise From HTDP") (? . 3) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2025/01/another-exercise-from-htdp.html" . windows) (u . "/2025\\01\\another-exercise-from-htdp.html") (u . "2025-01-10T11:46:08") (? . 5) (? . 4) (c (u . "Learning") c (u . "SoftwareEngineering") c (u . "HtDP")) (u . "\n<p>Another exercise from Chapter 1 of <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a>.</p>") #t (u . "\n<p>Another exercise from Chapter 1 of <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a>.</p>\n<!-- more-->\n\n<p>My answer for exercise 9 in Chapter 1.</p>\n\n<div class=\"brush: racket\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string~3f))\" style=\"color: inherit\">string?</a></span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"n\">image?</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-height</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-width</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"p\">))]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))\" style=\"color: inherit\">number?</a></span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"n\">expression</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._boolean~3f))\" style=\"color: inherit\">boolean?</a></span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)]))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>A few more points lest I forget:</p>\n\n<ol>\n <li>\n  <p>It&rsquo;s very handy to format your racket code. Simply use raco to install the fmt package (<code>raco pkg install fmt</code>). Once you do that the command line is something like: <code>raco fmt --width #your_preferred_maxwidth --indent #your_preferred_indentation -i #racket_source_file</code>. In my case it&rsquo;s this <code>raco fmt --width 80 --indent 3 -i htdp_chapter1_ex9.rkt</code>.</p></li>\n <li>\n  <p>Make sure if you do anything in DrRacket that you save your definitions as <em>text</em>. Otherwise the formatter won&rsquo;t be able to do a thing with the source. Saving as text is under the <code>Save Other</code> menu in DrRacket.</p></li></ol>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-02-helloagainworld.md" . windows) f post (u . "Hello Again World") (? . 9) 1733414308 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2024/12/hello-again-world.html" . windows) (u . "/2024\\12\\hello-again-world.html") (u . "2024-12-02T20:12:35") #f (? . 8) (c (u . "Writing") c (u . "Intro")) (u . "\n<p>Yeah I want to write some stuff again and I don&rsquo;t want to let procrastination keep me from writing. So, yeah, this is a really, really short first post but if I wait for inspiration or something smart to say I&rsquo;ll never say anything!</p>") #f (u . "\n<p>Yeah I want to write some stuff again and I don&rsquo;t want to let procrastination keep me from writing. So, yeah, this is a really, really short first post but if I wait for inspiration or something smart to say I&rsquo;ll never say anything!</p>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-19-detroit-tech-watch-book-club.md" . windows) f post (u . "Detroit Tech Watch Book Club") (? . 10) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2024/12/detroit-tech-watch-book-club.html" . windows) (u . "/2024\\12\\detroit-tech-watch-book-club.html") (u . "2024-12-19T11:16:03") (? . 11) (? . 6) (c (u . "DetroitTechWatch") c (u . "Learning") c (u . "Books")) (u . "\n<p>Announcing the free Detroit Tech Watch book club to help technologists step up their technical game.</p>") #t (u . "\n<p>Announcing the free Detroit Tech Watch book club to help technologists step up their technical game.</p>\n<!-- more-->\n\n<p>I decided that I want to read <a href=\"https://htdp.org\"><em>How To Design Programs</em></a> since it often comes up in discussions of the <a href=\"https://racket-lang.org\">Racket</a>. I can read it all by myself (often do, in fact) but reading it with other nerds is a way to make it more fun and to hear the insights of others. So I decided that it was time to start a Detroit Tech Watch book club. I put the book club on <a href=\"https://fable.co\">Fable</a>. It&rsquo;s free to join and it&rsquo;s got some nice features for organizing group reading. The book club itself is <a href=\"https://fable.co/club/dettechwatch-book-club-with-onorio-catenacci-178852936285?referralID=3akW7tRQ77\">here</a>.</p>\n\n<p>If you&rsquo;re reading this (I&rsquo;m waving at my fans! Both of them!) consider yourself invited to join the nerdfest!</p>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-07-some-exercises-from-htdp.md" . windows) f post (u . "Some Exercises From HtDP") (? . 5) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2025/01/some-exercises-from-htdp.html" . windows) (u . "/2025\\01\\some-exercises-from-htdp.html") (u . "2025-01-07T13:21:18") (? . 6) (? . 3) (c (u . "Learning") c (u . "SoftwareEngineering") c (u . "HtDP")) (u . "\n<p>Working through How To Design Programs; here&rsquo;s my first crack at one of the first exercises!</p>") #t (u . "\n<p>Working through How To Design Programs; here&rsquo;s my first crack at one of the first exercises!</p>\n<!-- more-->\n\n<p>So there are a few of us in the newly started <a href=\"https://detroittechwatch.com\">Detroit Tech Watch</a> book club and we&rsquo;re reading (and working through) <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a>. I just wanted to share my first crack at one of the exercises in the book&rsquo;s prologue.</p>\n\n<div class=\"brush: racket\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">; constants</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">WIDTH</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">HEIGHT</span><span class=\"w\"> </span><span class=\"mi\">400</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">ROCKET</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"c1\">; Rocket is an image which you can see on the HtDP site</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">UFO</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">overlay</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">circle</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\">solid</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\">green</span><span class=\"p\">)</span>\n<span class=\"w\">                     </span><span class=\"p\">(</span><span class=\"n\">rectangle</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\">solid</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\">green</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">HEIGHT-OF-ROCK-BED</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">ROCKET-CENTER-TO-TOP</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"w\"> </span><span class=\"n\">HEIGHT</span><span class=\"w\"> </span><span class=\"n\">HEIGHT-OF-ROCK-BED</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-height</span><span class=\"w\"> </span><span class=\"n\">ROCKET</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">UFO-CENTER-TO-TOP</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span><span class=\"w\"> </span><span class=\"n\">HEIGHT</span><span class=\"w\"> </span><span class=\"n\">HEIGHT-OF-ROCK-BED</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">image-height</span><span class=\"w\"> </span><span class=\"n\">UFO</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">ROCK-BED</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rectangle</span><span class=\"w\"> </span><span class=\"n\">WIDTH</span><span class=\"w\"> </span><span class=\"n\">HEIGHT-OF-ROCK-BED</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\">solid</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\">grey</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">BASE-SCENE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">empty-scene</span><span class=\"w\"> </span><span class=\"n\">WIDTH</span><span class=\"w\"> </span><span class=\"n\">HEIGHT</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\">blue</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">SCENE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">overlay/align</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\">right</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\">bottom</span><span class=\"w\"> </span><span class=\"n\">ROCK-BED</span><span class=\"w\"> </span><span class=\"n\">BASE-SCENE</span><span class=\"p\">))</span>\n\n<span class=\"c1\">; functions</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">picture-of-rocket.v4</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">ROCKET-CENTER-TO-TOP</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">place-image</span><span class=\"w\"> </span><span class=\"n\">ROCKET</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span><span class=\"w\"> </span><span class=\"n\">WIDTH</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">SCENE</span><span class=\"p\">)]</span>\n\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">ROCKET-CENTER-TO-TOP</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">place-image</span><span class=\"w\"> </span><span class=\"n\">ROCKET</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span><span class=\"w\"> </span><span class=\"n\">WIDTH</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ROCKET-CENTER-TO-TOP</span>\n<span class=\"w\">                  </span><span class=\"n\">SCENE</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">picture-of-ufo</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">UFO-CENTER-TO-TOP</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">place-image</span><span class=\"w\"> </span><span class=\"n\">UFO</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span><span class=\"w\"> </span><span class=\"n\">WIDTH</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">SCENE</span><span class=\"p\">)]</span>\n\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">UFO-CENTER-TO-TOP</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">place-image</span><span class=\"w\"> </span><span class=\"n\">UFO</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span><span class=\"w\"> </span><span class=\"n\">WIDTH</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ROCKET-CENTER-TO-TOP</span>\n<span class=\"w\">                  </span><span class=\"n\">SCENE</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Since they don&rsquo;t call out <code>overlay/align</code> in the text I feel that I must have missed something. However this seems to accomplish what they are looking for (as best I can tell).</p>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-20-exercise-58-htdp.md" . windows) f post (u . "Exercise 58 HtDP") (? . 1) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2025/01/exercise-58-htdp.html" . windows) (u . "/2025\\01\\exercise-58-htdp.html") (u . "2025-01-20T15:59:14") (? . 4) (? . 7) (c (u . "Learning") c (u . "SoftwareEngineering") c (u . "HtDP")) (u . "\n<p>My answers for the exercises in Chapter 4.6 Exercise 58 of <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a>.</p>") #t (u . "\n<p>My answers for the exercises in Chapter 4.6 Exercise 58 of <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a>.</p>\n<!-- more-->\n\n<div class=\"brush: racket\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"c1\">; Price -&gt; Number</span>\n<span class=\"c1\">; computes the sales tax charged for price</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">LOW-TAX-RATE</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">LTR-LOWER-BOUND</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">LTR-UPPER-BOUND</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">MIDDLE-TAX-RATE</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">MTR-LOWER-BOUND</span><span class=\"w\"> </span><span class=\"n\">LTR-UPPER-BOUND</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">MTR-UPPER-BOUND</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">HIGH-TAX-RATE</span><span class=\"w\"> </span><span class=\"mf\">0.08</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">HTR-LOWER-BOUND</span><span class=\"w\"> </span><span class=\"n\">MTR-UPPER-BOUND</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">check-expect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sales-tax</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">LOW-TAX-RATE</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">check-expect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sales-tax</span><span class=\"w\"> </span><span class=\"mi\">537</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">LOW-TAX-RATE</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">check-expect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sales-tax</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">MIDDLE-TAX-RATE</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">check-expect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sales-tax</span><span class=\"w\"> </span><span class=\"mi\">9999</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">MIDDLE-TAX-RATE</span><span class=\"w\"> </span><span class=\"mi\">9999</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">check-expect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sales-tax</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">HIGH-TAX-RATE</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">check-expect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sales-tax</span><span class=\"w\"> </span><span class=\"mi\">12017</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">HIGH-TAX-RATE</span><span class=\"w\"> </span><span class=\"mi\">12017</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sales-tax</span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e~3d))\" style=\"color: inherit\">&gt;=</a></span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"w\"> </span><span class=\"n\">LTR-LOWER-BOUND</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"w\"> </span><span class=\"n\">LTR-UPPER-BOUND</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"n\">LOW-TAX-RATE</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e~3d))\" style=\"color: inherit\">&gt;=</a></span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"w\"> </span><span class=\"n\">MTR-LOWER-BOUND</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"w\"> </span><span class=\"n\">MTR-UPPER-BOUND</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"w\"> </span><span class=\"n\">MIDDLE-TAX-RATE</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">[(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e~3d))\" style=\"color: inherit\">&gt;=</a></span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"w\"> </span><span class=\"n\">HTR-LOWER-BOUND</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"n\">price</span><span class=\"w\"> </span><span class=\"n\">HIGH-TAX-RATE</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>A few words of explanation to help clear some possible confusion:</p>\n\n<ul>\n <li>\n  <p>I hard coded MTR-LOWER-BOUND as LTR-UPPER-BOUND; likewise with HTR-LOWER-BOUND. I did it in this way because initially they&rsquo;re the same; however if someone needs to change them in the future, they&rsquo;re separated as differing values.</p></li>\n <li>\n  <p>I considered using the upper/lower bounds inside my unit tests but I don&rsquo;t think that would be wise. Using the bound constant definitions in the test itself may hide issues with the code.</p></li></ul>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-05-where-i-m-going.md" . windows) f post (u . "Where I'm Going") (? . 8) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2024/12/where-i-m-going.html" . windows) (u . "/2024\\12\\where-i-m-going.html") (u . "2024-12-05T10:38:50") (? . 9) (? . 12) (c (u . "Personal") c (u . "SoftwareEngineering")) (u . "\n<p>There are a few things in terms of technology that I&rsquo;ve had my eye upon. I&rsquo;d like to share some thoughts with you for whatever it&rsquo;s worth.</p>") #t (u . "\n<p>There are a few things in terms of technology that I&rsquo;ve had my eye upon. I&rsquo;d like to share some thoughts with you for whatever it&rsquo;s worth.</p>\n<!-- more-->\n\n<p>Things I&rsquo;m interested in:</p>\n\n<p>1.) Elixir</p>\n\n<p>I&rsquo;ve been interested in FP for years because to my mind it gives us a nice way to remove one accidental complexity that seems innate (but is not) in software development. That is accidental mutation of values. As I&rsquo;ve said to people repeatedly mutation of itself is neither good nor bad; it&rsquo;s simply something that is essential in certain situations. Accidental mutation&mdash;that is the unintentional changing of values&mdash;is an accidental complexity that we should strive to remove as much as possible. A lot of people have set a lot of bytes discussing why accidental mutation is a problem so I won&rsquo;t belabor the point.</p>\n\n<p>Elixir has the wonderful property of being functional first and being built on the industrial strength Erlang VM. I&rsquo;m sure there are lots of folks who will see this and think to themselves &ldquo;Oh God here&rsquo;s another shiny new object for developers to chase&rdquo; and that&rsquo;d be underselling the importance of the fundamental change of approach that is present in Erlang and it&rsquo;s VM.</p>\n\n<p>2.) Racket</p>\n\n<p>You may have guessed by the fact I used Frog to create this static site that I have some interest in Racket. I confess I&rsquo;ve always had a bit of interest in LISP family languages but like so many others I wish John McCarthy had picked something besides parentheses to express syntax.</p>\n\n<p>The reason I find Racket so interesting is the fact that after years and years of hearing about creating domain specific languages (DSL) within our coding paradigms here is a tool that actually gives you the ability to create a DSL and a pretty robust one at that.</p>\n\n<p>3.) Formal Methods and Formal Modeling</p>\n\n<p>I&rsquo;ve been trying to wrap my head around these similar ideas for a few years now. When you&rsquo;re self-taught that wonderful moment of the light of realization breaking through the clouds of confusion can take a while to arrive.</p>\n\n<p>The fact that more than one extremely smart person seems to have some interest in Formal Methods and Formal Modeling seems to indicate this is worth the time I&rsquo;ve been struggling to understand it.</p>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-24-speaking.md" . windows) f post (u . "Speaking") (? . 6) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2024/12/speaking.html" . windows) (u . "/2024\\12\\speaking.html") (u . "2024-12-24T09:28:03") (? . 10) (? . 5) (c (u . "Meetups") c (u . "SoftwareEngineering") c (u . "Learning")) (u . "\n<p>I&rsquo;m going to be speaking at Ann Arbor Tech Convergence. You should attend!</p>") #t (u . "\n<p>I&rsquo;m going to be speaking at Ann Arbor Tech Convergence. You should attend!</p>\n<!-- more-->\n\n<p>As we continue in this rather icy post-pandemic tech world one of the things I&rsquo;ve been craving more and more is to be able to spend time chatting with other technical folks. I&rsquo;m an introvert but even I get more energized by talking with other people about tech. That&rsquo;s why I was very pleased to see some folks over in Ann Arbor, MI putting together a local meetup of meetups which they call <a href=\"https://www.meetup.com/Tech-Inclusive\">Tech Convergence</a>.</p>\n\n<p><em>Yes I know that says &ldquo;Tech Inclusive.&rdquo; They run the Tech Convergence meetup via the Tech Inclusive group. I didn&rsquo;t link things wrong!</em></p>\n\n<p>I&rsquo;ve already had the privilege of speaking to one of their meetings&mdash;it was AWESOME! Great questions, great participation&mdash;10 out of 10! I will once again have the privilege of speaking to them in January. That meetup&rsquo;s details are here:</p>\n\n<p><a href=\"https://www.meetup.com/Tech-Inclusive/events/305199469\">https://www.meetup.com/Tech-Inclusive/events/305199469</a></p>\n\n<p>I really hope that if you&rsquo;re reading this that you&rsquo;ll join us. I confess that a deep love of talking shop and learning from other technical people is one of the most enjoyable things I can think to do!</p>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2025-01-28-exercises-80-and-81-from-how-to-design-programs.md" . windows) f post (u . "Exercises 80 and 81 From How To Design Programs") (? . 2) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2025/01/exercises-80-and-81-from-how-to-design-programs.html" . windows) (u . "/2025\\01\\exercises-80-and-81-from-how-to-design-programs.html") (u . "2025-01-28T15:50:08") (? . 7) (? . 0) (c (u . "Learning") c (u . "SoftwareEngineering") c (u . "HtDP")) (u . "\n<p>My responses for Exercises 80 and 81 (Chapter 5.8) of <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a></p>") #t (u . "\n<p>My responses for Exercises 80 and 81 (Chapter 5.8) of <a href=\"https://htdp.org/2024-11-6/Book/index.html\"><em>How to Design Programs</em></a></p>\n<!-- more-->\n\n<div class=\"brush: racket\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">typed/racket</span>\n\n<span class=\"c1\">; A 3d point structure</span>\n<span class=\"c1\">; r3 : Number Number Number -&gt; r3</span>\n<span class=\"c1\">; r3 : Number -&gt; Number -&gt; Number -&gt; r3</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span><span class=\"w\"> </span><span class=\"n\">typed/rackunit</span><span class=\"p\">)</span>\n\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define-struct.html#(form._((lib._racket/private/base..rkt)._struct))\" style=\"color: inherit\">struct</a></span><span class=\"w\"> </span><span class=\"n\">r3</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">ex1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">ex2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\">distance-to-origin</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/function-contracts.html#(form._((lib._racket/contract/base..rkt)._-~3e))\" style=\"color: inherit\">-&gt;</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">distance-to-origin</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sqrt))\" style=\"color: inherit\">sqrt</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._sqr))\" style=\"color: inherit\">sqr</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r3-x</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._sqr))\" style=\"color: inherit\">sqr</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r3-y</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._sqr))\" style=\"color: inherit\">sqr</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r3-z</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)))))</span>\n\n<span class=\"p\">(</span><span class=\"n\">check-equal?</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">distance-to-origin</span><span class=\"w\"> </span><span class=\"n\">ex1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"s2\">\"distance-to-origin is <a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a> as expected\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">check-equal?</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">distance-to-origin</span><span class=\"w\"> </span><span class=\"n\">ex2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"s2\">\"distance-to-origin is <a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a> as expected\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">; 5.8 Exercise 80</span>\n\n<span class=\"c1\">; movie is (movie String String Number)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define-struct.html#(form._((lib._racket/private/base..rkt)._struct))\" style=\"color: inherit\">struct</a></span><span class=\"w\"> </span><span class=\"n\">movie</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">producer</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">year</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">]))</span>\n\n<span class=\"c1\">; movie-produced-by? : movie -&gt; Boolean</span>\n<span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\">movie-produced-by?</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/function-contracts.html#(form._((lib._racket/contract/base..rkt)._-~3e))\" style=\"color: inherit\">-&gt;</a></span><span class=\"w\"> </span><span class=\"n\">movie</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.String))\" style=\"color: inherit\">String</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Boolean))\" style=\"color: inherit\">Boolean</a></span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">movie-produced-by?</span><span class=\"w\"> </span><span class=\"n\">movie</span><span class=\"w\"> </span><span class=\"n\">producer-name</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string~3d~3f))\" style=\"color: inherit\">string=?</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">movie-producer</span><span class=\"w\"> </span><span class=\"n\">movie</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">producer-name</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">star-wars</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">movie</span><span class=\"w\"> </span><span class=\"s2\">\"Star Wars\"</span><span class=\"w\"> </span><span class=\"s2\">\"George Lucas\"</span><span class=\"w\"> </span><span class=\"mi\">1977</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"n\">was-produced-by-Lucas</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">movie-produced-by?</span><span class=\"w\"> </span><span class=\"n\">star-wars</span><span class=\"w\"> </span><span class=\"s2\">\"George Lucas\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">check-equal?</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">movie-produced-by?</span><span class=\"w\"> </span><span class=\"n\">star-wars</span><span class=\"w\"> </span><span class=\"s2\">\"George Lucas\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">check-equal?</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">movie-produced-by?</span><span class=\"w\"> </span><span class=\"n\">star-wars</span><span class=\"w\"> </span><span class=\"s2\">\"Steven Spielberg\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"no\">#f</span><span class=\"p\">)</span>\n<span class=\"c1\">; check-pred seems more appropriate here but it doesn&#39;t seem to play well with TR.</span>\n\n<span class=\"c1\">; 5.8 Exercise 81</span>\n<span class=\"c1\">;time-since-midnight is (time-since-midnight Number Number Number)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define-struct.html#(form._((lib._racket/private/base..rkt)._struct))\" style=\"color: inherit\">struct</a></span><span class=\"w\"> </span><span class=\"n\">time-since-midnight</span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">hour</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">minute</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._second))\" style=\"color: inherit\">second</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">]))</span>\n\n<span class=\"c1\">; Take TIME-SINCE-MIDNIGHT and return equivalent number of seconds</span>\n<span class=\"c1\">; time-since-midnight -&gt; seconds</span>\n<span class=\"c1\">;</span>\n<span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"w\"> </span><span class=\"n\">time-&gt;seconds</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/function-contracts.html#(form._((lib._racket/contract/base..rkt)._-~3e))\" style=\"color: inherit\">-&gt;</a></span><span class=\"w\"> </span><span class=\"n\">time-since-midnight</span><span class=\"w\"> </span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Number))\" style=\"color: inherit\">Number</a></span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">time-&gt;seconds</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">time-since-midnight-hour</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">3600</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">time-since-midnight-minute</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">time-since-midnight-second</span><span class=\"w\"> </span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/time.html#(form._((lib._racket/private/more-scheme..rkt)._time))\" style=\"color: inherit\">time</a></span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"n\">check-equal?</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">time-&gt;seconds</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">time-since-midnight</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">23</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"mi\">1410</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">check-equal?</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">time-&gt;seconds</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">time-since-midnight</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"mi\">36745</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Again, not restricting myself to BSL (even though that&rsquo;s what they use in HtDP). Hence I&rsquo;m using RackUnit for my unit testing and Typed Racket to do some type checking.</p>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-06-three-ways-to-share-values-between-elixir-modules.md" . windows) f post (u . "Three Ways To Share Values Between Elixir Modules") (? . 11) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2024/12/three-ways-to-share-values-between-elixir-modules.html" . windows) (u . "/2024\\12\\three-ways-to-share-values-between-elixir-modules.html") (u . "2024-12-18T09:40:00") (? . 12) (? . 10) (c (u . "Elixir") c (u . "CodingRecipes")) (u . "\n<p>A recipe for avoiding repeated definitions in <a href=\"https://elixir-lang.org\">Elixir</a> modules!</p>") #t (u . "\n<p>A recipe for avoiding repeated definitions in <a href=\"https://elixir-lang.org\">Elixir</a> modules!</p>\n<!-- more-->\n\n<p>I find that as I get older I find myself trying to remember coding techniques and idioms that shouldn&rsquo;t be hard to remember but sometimes are anyway. This is one of those cases&mdash;the module attributes took me a bit of effort to work out so I thought I&rsquo;d write it down. I&rsquo;m sharing it here so others might benefit from it as well.</p>\n\n<h2 id=\"what-do-i-mean-by-constant\">What Do I Mean By Constant?</h2>\n\n<p>First it feels appropriate to say that when I say constant I have a definite technical meaning in mind. In a mathematical sense a constant like <strong>pi</strong> or <strong>e</strong> is simply a value that&rsquo;s fixed on the number line. In the sense that software developers use the word &ldquo;constant&rdquo; we usually mean something which is an extension of the notion of a mathematical constant&mdash;a fixed value. It could be a number or a string or even a more complex data structure; the point is that in the course of the normal execution of the binary it won&rsquo;t change.</p>\n\n<p>Here I&rsquo;m using the term constant to name a value that needs to be referenced in two or more modules in Elixir which none of them will change. The value will be defined in one module and then read from others. There are two reasons to do this approach:</p>\n\n<ol>\n <li>It makes the code more readable</li>\n <li>It keeps the developer from repeating his/her self.</li></ol>\n\n<p>Both of those are good reasons for using this approach. I&rsquo;m going to examine them a little bit before I discuss the coding techniques specifically.</p>\n\n<h2 id=\"more-readable-code\">More Readable Code</h2>\n\n<p>While a compiler and/or interpreter doesn&rsquo;t care about the difference between code using literals and code using symbolic names, developers very much care about this. If I have code that reads like this:</p>\n\n<div class=\"brush: elixir\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">is_odd_number?</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">rem</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"c1\"># Version 1</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>vs.</p>\n\n<div class=\"brush: elixir\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">rem</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\">                   </span><span class=\"c1\"># Version 2</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>which one conveys the intent of the coder better? Now you might say &ldquo;Hey no one names their functions <em>f</em> and no one names their arguments <em>n</em>&rdquo; and I wish I could say you&rsquo;re correct. But I have run across code like this in practice and it&rsquo;s hard to decipher&mdash;well for a human being to decipher at any rate. The compiler doesn&rsquo;t care either way. The point is that using descriptive names (as opposed to bare literals) is a great technique for making your code more readable.\n <br />Constants, in this sense, are a form of a descriptive name for a quantity.</p>\n\n<p>You may even have to read your own code in six months and you&rsquo;ll be glad you took the extra time to make it easier to understand.</p>\n\n<h2 id=\"keeps-the-developer-from-repeating\">Keeps the Developer From Repeating</h2>\n\n<p>It&rsquo;s become a mantra chanted over and over by developers who don&rsquo;t know much but they do know that repeating <em>anything</em> in code is a bad idea. Except it isn&rsquo;t always a bad idea. The trick is to know when it&rsquo;s ok to repeat things and when it isn&rsquo;t.</p>\n\n<p>Part of distinguishing between one case and the other is to understand why repetition is a bad thing in the first place. The problem is that if I duplicate code and said code needs to be fixed later there&rsquo;s a good chance I won&rsquo;t find all the duplications and fix them too. And that&rsquo;s assuming I&rsquo;m working on my own code. It&rsquo;s even more likely to be a problem when someone else will be maintaining your code. They&rsquo;re more likely to miss spots where the code needs to be fixed.</p>\n\n<p>So the next time you&rsquo;re tempted to copy/paste a bit of code think of your future self (or perhaps the poor person who will maintain your code) and do a bit of refactoring so you don&rsquo;t need to repeat the code.</p>\n\n<p>Now, there are times when repeating code actually simplifies things. Part of the issue with removing duplication is that it introduces coupling. As long as your coupling is clean and simple (in the decomplected sense of &ldquo;simple&rdquo;) you&rsquo;re fine. Shared definitions&mdash;numerical constants, strings that signify names, etc.&mdash;definitely fall under this rubric.</p>\n\n<p>However code under maintenance tends to get a lot of &ldquo;this is almost what I need but not exactly&rdquo;. This is part of the reason people tend to copy/paste code in the first place. So the admonition to avoid repeating code is not an absolute one and you should apply your judgement. Is the place where you&rsquo;re thinking of copy/pasting likely to change frequently? Are the changes likely to differ from changes to the original code? Then by all means copy/paste. On the other hand, if it&rsquo;s not likely to change frequently then you&rsquo;re better off to reference the single defintion from the other places in your code. An example of something which may change but is not likely to change often is a company name. It&rsquo;s possible for a company to change its name but it&rsquo;s not likely to happen very frequently. If you&rsquo;ve hard-coded that name 50 places in your code that&rsquo;s 50 places you have to find and fix. If you hard code it in one place and then reference the constant in other code then you only need to fix it in one place.</p>\n\n<p>Partially the decision about what should be repeated and what shouldn&rsquo;t comes down to cohesion; that is to say, how much does the code in some particular block of code all serve one function. If a piece of code is highly cohesive (e. g. a function to calculate the area of a circle) vs a lower cohesion function (e. g. calculate the area of a circle, print the circle in three colors and then return the current date) then it&rsquo;s better not to repeat the code. Our judgement about copying and pasting code should be inversely proportional to the strength of the cohesion of the code.</p>\n\n<p>Like many ideas in engineering the notion of &ldquo;don&rsquo;t repeat yourself&rdquo; is not one that can be applied without thought or judgement.</p>\n\n<h2 id=\"constants-in-elixir\">Constants In Elixir</h2>\n\n<p>Now having said all that let&rsquo;s talk about a couple of ways to deal with values shared between modules in Elixir. You can register an attribute in one module and then reference that attibute from the other modules or you can create a (for lack of a better name) constant function&mdash;that is a function that takes no argument and simply hands back a constant value. If someone knows the right name for this sort of function please post it in the comments for me! For sake of illustration I&rsquo;ll pretend I need a Pi constant in my code.</p>\n\n<p>Consider the following code:</p>\n\n<div class=\"brush: elixir\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">defmodule</span><span class=\"w\"> </span><span class=\"nc\">MyMath</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">   </span><span class=\"nc\">Module</span><span class=\"o\">.</span><span class=\"n\">register_attribute</span><span class=\"p\">(</span><span class=\"bp\">__MODULE__</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">:pi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">persist</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">true</span><span class=\"p\">)</span>\n<span class=\"w\">   </span><span class=\"na\">@pi</span><span class=\"w\"> </span><span class=\"mf\">3.141592653</span>\n\n<span class=\"w\">   </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">pi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">do</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">3.141592653</span>\n<span class=\"w\">   </span><span class=\"c1\"># this could also be: </span>\n<span class=\"w\">   </span><span class=\"c1\"># def pi, do: @pi</span>\n<span class=\"k\">end</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>and now there are two ways for me to fetch the value of Pi in other modules:</p>\n\n<div class=\"brush: elixir\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">defmodule</span><span class=\"w\"> </span><span class=\"nc\">My.Other.Module.That.Needs.To.Know.Pi</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">   </span><span class=\"kd\">defp</span><span class=\"w\"> </span><span class=\"n\">get_pi</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"c1\"># module attribute approach</span>\n<span class=\"w\">      </span><span class=\"p\">[</span><span class=\"n\">pi</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">MyMath</span><span class=\"o\">.</span><span class=\"n\">__info__</span><span class=\"p\">(</span><span class=\"ss\">:attributes</span><span class=\"p\">)[</span><span class=\"ss\">:pi</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"n\">pi</span>\n<span class=\"w\">   </span><span class=\"k\">end</span>\n\n<span class=\"w\">   </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">circle_area</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"nc\">MyMath</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">radius</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">radius</span><span class=\"w\"> </span><span class=\"c1\">#constant function approach</span>\n<span class=\"w\">   </span><span class=\"k\">end</span>\n\n<span class=\"w\">   </span><span class=\"c1\"># or</span>\n<span class=\"w\">   </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">circle_area_alternate</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"n\">get_pi</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">radius</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">radius</span>\n<span class=\"w\">   </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Both of these approaches will work. The attributes approach is really not recommended for a constant shared between modules. It&rsquo;s more recommended for metadata about a module&mdash;author, last revision date etc. The more recommended way to do this (although I will grant that it looks a bit odd) is a constant function.</p>\n\n<p>Finally, here&rsquo;s the third way to share values between modules. I wish I could take credit for coming up with it but as far as I know that credit belongs to Paul Schoenfelder (aka BitWalker) who&rsquo;s a super-smart developer!</p>\n\n<p>The trick is to define the value to be shared in a using macro in the source module. Like this:</p>\n\n<div class=\"brush: elixir\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">defmodule</span><span class=\"w\"> </span><span class=\"nc\">MyMath</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\"> </span><span class=\"kd\">defmacro</span><span class=\"w\"> </span><span class=\"n\">__using__</span><span class=\"p\">(</span><span class=\"bp\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">quote</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">       </span><span class=\"na\">@pi</span><span class=\"w\"> </span><span class=\"mf\">3.141592653</span>\n<span class=\"w\">    </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Then you can simply use the module in a different module and the using macro is run and the value becomes available. Like so:</p>\n\n<div class=\"brush: elixir\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kd\">defmodule</span><span class=\"w\"> </span><span class=\"nc\">My.Other.Module.That.Needs.To.Know.Pi</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">   </span><span class=\"kn\">use</span><span class=\"w\"> </span><span class=\"nc\">MyMath</span>\n\n<span class=\"w\">   </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">circle_area</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"na\">@pi</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">radius</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">radius</span><span class=\"w\"> </span><span class=\"c1\">#\"using\" macro approach</span>\n<span class=\"w\">   </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The main idea here is that if you&rsquo;re using the same named value in multiple modules, you want to avoid <em>defining</em> it more than once. Defining the value in several different modules is an excellent way to insure that someone will miss changing the value somewhere in maintenance and that can lead to some really odd, difficult to reproduce bugs.</p>")) ((p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\_src\\posts\\2024-12-11-scripting-with-racket.md" . windows) f post (u . "Scripting With Racket") (? . 12) 1738267041 (p+ #"C:\\Users\\Onorio_Developer\\OnorioCatenacci.github.io\\2024/12/scripting-with-racket.html" . windows) (u . "/2024\\12\\scripting-with-racket.html") (u . "2024-12-11T17:13:20") (? . 8) (? . 11) (c (u . "Racket") c (u . "Scripting") c (u . "CrossPlatform") c (u . "CodingRecipes")) (u . "\n<p>Using <a href=\"https://racket-lang.org\">racket</a> in a shell script allows a developer to basically use a lot of the same code across platforms.</p>") #t (u . "\n<p>Using <a href=\"https://racket-lang.org\">racket</a> in a shell script allows a developer to basically use a lot of the same code across platforms.</p>\n<!-- more-->\n\n<p>So I&rsquo;ve begun blogging with Frog (as you can see) which is an excellent static site tool available with Racket. One thing I discovered early on is that while I don&rsquo;t think there should be a problem with blogging from Linux or Windows, Frog isn&rsquo;t quite so easily pursuaded. After a little digging I was able to find that all I needed to do is to delete the build file placed under the .frog directory in my source tree. Being a developer I hate taking more work than I need to. So I started digging into how I can automate this task. And the scripting story for Racket is great.</p>\n\n<p>In the Racket guide <a href=\"https://docs.racket-lang.org/guide/scripts.html\">here</a> there&rsquo;s a great pointer to how to create shell script in Linux and a batch file on Windows. But I hate that people are still using batch files on Windows after Powershell has been available for at least a decade. So I did a little digging and figured out how to do this task with Powershell too. Here&rsquo;s the Linux script</p>\n\n<div class=\"brush: zsh\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"ch\">#! /usr/local/bin/racket</span>\n<span class=\"c1\">#lang typed/racket/base</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span>Set<span class=\"w\"> </span>everything<span class=\"w\"> </span>up<span class=\"w\"> </span>first\n<span class=\"o\">(</span>:<span class=\"w\"> </span>base-frog-dir<span class=\"w\"> </span>Path<span class=\"o\">)</span>\n<span class=\"o\">(</span>define<span class=\"w\"> </span>base-frog-dir<span class=\"w\"> </span><span class=\"o\">(</span>string-&gt;path<span class=\"w\"> </span><span class=\"s2\">\"OnorioCatenacci.github.io\"</span><span class=\"o\">))</span>\n<span class=\"o\">(</span>:<span class=\"w\"> </span>home-dir<span class=\"w\"> </span>Path<span class=\"o\">)</span>\n<span class=\"o\">(</span>define<span class=\"w\"> </span>home-dir<span class=\"w\"> </span><span class=\"o\">(</span>find-system-path<span class=\"w\"> </span><span class=\"o\">(</span>quote<span class=\"w\"> </span>home-dir<span class=\"o\">)))</span>\n<span class=\"o\">(</span>:<span class=\"w\"> </span>hidden-frog-build-dir<span class=\"w\"> </span>Path<span class=\"o\">)</span>\n<span class=\"o\">(</span>define<span class=\"w\"> </span>hidden-frog-build-dir<span class=\"w\"> </span><span class=\"o\">(</span>string-&gt;path<span class=\"w\"> </span><span class=\"s2\">\".frog\"</span><span class=\"o\">))</span>\n<span class=\"o\">(</span>:<span class=\"w\"> </span>frog-build-dir<span class=\"w\"> </span>Path<span class=\"o\">)</span>\n<span class=\"o\">(</span>define<span class=\"w\"> </span>frog-build-dir<span class=\"w\"> </span><span class=\"o\">(</span>string-&gt;path<span class=\"w\"> </span><span class=\"s2\">\"build\"</span><span class=\"o\">))</span>\n<span class=\"o\">(</span>:<span class=\"w\"> </span>full-frog-path<span class=\"w\"> </span>Path<span class=\"o\">)</span>\n<span class=\"o\">(</span>define<span class=\"w\"> </span>full-frog-path<span class=\"w\"> </span><span class=\"o\">(</span>build-path<span class=\"w\"> </span>home-dir<span class=\"w\"> </span>base-frog-dir<span class=\"w\"> </span>hidden-frog-build-dir<span class=\"w\"> </span>frog-build-dir<span class=\"o\">))</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span>Now<span class=\"w\"> </span>we<span class=\"w\"> </span>finally<span class=\"w\"> </span>go<span class=\"w\"> </span>ahead<span class=\"w\"> </span>and<span class=\"w\"> </span>delete<span class=\"w\"> </span>the<span class=\"w\"> </span>build<span class=\"w\"> </span>file\n<span class=\"o\">(</span>delete-file<span class=\"w\"> </span>full-frog-path<span class=\"o\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Now, here&rsquo;s the extremely nice thing. Here&rsquo;s that same script in Powershell:</p>\n\n<div class=\"brush: powershell\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">;</span> <span class=\"n\">Racket</span><span class=\"p\">.</span><span class=\"n\">exe</span> <span class=\"p\">(</span><span class=\"nb\">Resolve-Path</span> <span class=\"nv\">$PSCommandPath</span><span class=\"p\">)</span> <span class=\"nv\">$args</span>\n<span class=\"p\">;</span> <span class=\"n\">Exit</span>\n<span class=\"c\">#lang typed/racket/base</span>\n\n<span class=\"p\">;</span> <span class=\"nb\">Set </span><span class=\"n\">everything</span> <span class=\"n\">up</span> <span class=\"n\">first</span>\n<span class=\"p\">(:</span> <span class=\"n\">base-frog-dir</span> <span class=\"n\">Path</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">base-frog-dir</span> <span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">-&gt;</span><span class=\"n\">path</span> <span class=\"s2\">\"OnorioCatenacci.github.io\"</span><span class=\"p\">))</span>\n<span class=\"p\">(:</span> <span class=\"n\">home-dir</span> <span class=\"n\">Path</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">home-dir</span> <span class=\"p\">(</span><span class=\"nb\">find-system</span><span class=\"n\">-path</span> <span class=\"p\">(</span><span class=\"n\">quote</span> <span class=\"n\">home-dir</span><span class=\"p\">)))</span>\n<span class=\"p\">(:</span> <span class=\"n\">hidden-frog-build-dir</span> <span class=\"n\">Path</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">hidden-frog-build-dir</span> <span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">-&gt;</span><span class=\"n\">path</span> <span class=\"s2\">\".frog\"</span><span class=\"p\">))</span>\n<span class=\"p\">(:</span> <span class=\"n\">frog-build-dir</span> <span class=\"n\">Path</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">frog-build-dir</span> <span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">-&gt;</span><span class=\"n\">path</span> <span class=\"s2\">\"build\"</span><span class=\"p\">))</span>\n<span class=\"p\">(:</span> <span class=\"n\">full-frog-path</span> <span class=\"n\">Path</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">full-frog-path</span> <span class=\"p\">(</span><span class=\"n\">build-path</span> <span class=\"n\">home-dir</span> <span class=\"n\">base-frog-dir</span> <span class=\"n\">hidden-frog-build-dir</span> <span class=\"n\">frog-build-dir</span><span class=\"p\">))</span>\n\n<span class=\"p\">;</span> <span class=\"n\">Now</span> <span class=\"n\">we</span> <span class=\"k\">finally</span> <span class=\"n\">go</span> <span class=\"n\">ahead</span> <span class=\"n\">and</span> <span class=\"n\">delete</span> <span class=\"n\">the</span> <span class=\"n\">build</span> <span class=\"n\">file</span>\n<span class=\"p\">(</span><span class=\"n\">delete</span><span class=\"o\">-file</span> <span class=\"n\">full-frog-path</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>See the difference? The first two lines. That&rsquo;s it. That&rsquo;s all.</p>\n\n<p>You may notice that I needed to use the quote function in the definition of home-dir. This is solely conditioned by the fact that a single quote has special meaning in Powershell. Using <code>quote</code> allows me to work around this limitation. The nice thing is that I can leave it that way on Linux and in the Windows batch file and it works just fine!</p>\n\n<p>And finally just for sake of completeness:</p>\n\n<div class=\"brush: batch\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span>; <span class=\"p\">@</span><span class=\"k\">echo</span> off\n; Racket.exe <span class=\"s2\">\"</span><span class=\"nv\">%~f0</span><span class=\"s2\">\"</span> <span class=\"nv\">%*</span>\n; <span class=\"k\">exit</span> /b\n#lang typed/racket/base\n\n; <span class=\"k\">Set</span> <span class=\"nv\">everything up first</span>\n(<span class=\"p\">:</span> <span class=\"nl\">base-frog-dir</span><span class=\"c1\"> Path)</span>\n<span class=\"p\">(</span>define base-frog-dir (string-<span class=\"p\">&gt;</span>path <span class=\"s2\">\"OnorioCatenacci.github.io\"</span><span class=\"p\">)</span><span class=\"c1\">)</span>\n(<span class=\"p\">:</span> <span class=\"nl\">home-dir</span><span class=\"c1\"> Path)</span>\n<span class=\"p\">(</span>define home-dir (find-system-path (quote home-dir<span class=\"p\">)</span>))\n(<span class=\"p\">:</span> <span class=\"nl\">hidden-frog-build-dir</span><span class=\"c1\"> Path)</span>\n<span class=\"p\">(</span>define hidden-frog-build-dir (string-<span class=\"p\">&gt;</span>path <span class=\"s2\">\".frog\"</span><span class=\"p\">)</span><span class=\"c1\">)</span>\n(<span class=\"p\">:</span> <span class=\"nl\">frog-build-dir</span><span class=\"c1\"> Path)</span>\n<span class=\"p\">(</span>define frog-build-dir (string-<span class=\"p\">&gt;</span>path <span class=\"s2\">\"build\"</span><span class=\"p\">)</span><span class=\"c1\">)</span>\n(<span class=\"p\">:</span> <span class=\"nl\">full-frog-path</span><span class=\"c1\"> Path)</span>\n<span class=\"p\">(</span>define full-frog-path (build-path home-dir base-frog-dir hidden-frog-build-dir frog-build-dir<span class=\"p\">)</span><span class=\"c1\">)</span>\n\n; Now we finally go ahead and delete the build file\n<span class=\"p\">(</span>delete-file full-frog-path<span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>The ability to reuse basically the same scripts in three different shell scripting systems is a win to me. I don&rsquo;t have a Mac handy to test but I&rsquo;m sure that the only change that I&rsquo;d need would be the shebang lines at the top of the script.</p>\n\n<h3 id=\"edit\">EDIT</h3>\n\n<p>It occurs to me that others might mistake my intent to be complete in type specifications as being necessary. It isn&rsquo;t. Here&rsquo;s the version of the PS script with the type specifications removed so Typed Racket can infer the types. This works equally well and it&rsquo;s a bit shorter.</p>\n\n<div class=\"brush: powershell\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">;</span> <span class=\"n\">Racket</span><span class=\"p\">.</span><span class=\"n\">exe</span> <span class=\"p\">(</span><span class=\"nb\">Resolve-Path</span> <span class=\"nv\">$PSCommandPath</span><span class=\"p\">)</span> <span class=\"nv\">$args</span>\n<span class=\"p\">;</span> <span class=\"n\">Exit</span>\n<span class=\"c\">#lang typed/racket/base</span>\n\n<span class=\"p\">;</span> <span class=\"nb\">Set </span><span class=\"n\">everything</span> <span class=\"n\">up</span> <span class=\"n\">first</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">base-frog-dir</span> <span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">-&gt;</span><span class=\"n\">path</span> <span class=\"s2\">\"OnorioCatenacci.github.io\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">home-dir</span> <span class=\"p\">(</span><span class=\"nb\">find-system</span><span class=\"n\">-path</span> <span class=\"p\">(</span><span class=\"n\">quote</span> <span class=\"n\">home-dir</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">hidden-frog-build-dir</span> <span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">-&gt;</span><span class=\"n\">path</span> <span class=\"s2\">\".frog\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">frog-build-dir</span> <span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">-&gt;</span><span class=\"n\">path</span> <span class=\"s2\">\"build\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">define</span> <span class=\"n\">full-frog-path</span> <span class=\"p\">(</span><span class=\"n\">build-path</span> <span class=\"n\">home-dir</span> <span class=\"n\">base-frog-dir</span> <span class=\"n\">hidden-frog-build-dir</span> <span class=\"n\">frog-build-dir</span><span class=\"p\">))</span>\n\n<span class=\"p\">;</span> <span class=\"n\">Now</span> <span class=\"n\">we</span> <span class=\"k\">finally</span> <span class=\"n\">go</span> <span class=\"n\">ahead</span> <span class=\"n\">and</span> <span class=\"n\">delete</span> <span class=\"n\">the</span> <span class=\"n\">build</span> <span class=\"n\">file</span>\n<span class=\"p\">(</span><span class=\"n\">delete</span><span class=\"o\">-file</span> <span class=\"n\">full-frog-path</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>"))))